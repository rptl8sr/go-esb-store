// Package esb provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package esb

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for Status.
const (
	Closed       Status = "Closed"
	Dead         Status = "Dead"
	LessThannil  Status = "<nil>"
	New          Status = "New"
	Open         Status = "Open"
	PreOpening   Status = "PreOpening"
	Refranchised Status = "Refranchised"
)

// Defines values for GetStoresParamsFilter.
const (
	GetStoresParamsFilterPrimaryCountryRegionIdEqRUS GetStoresParamsFilter = "PrimaryCountryRegionId eq 'RUS'"
)

// Defines values for GetStoresCountParamsFilter.
const (
	GetStoresCountParamsFilterPrimaryCountryRegionIdEqRUS GetStoresCountParamsFilter = "PrimaryCountryRegionId eq 'RUS'"
)

// Status defines model for Status.
type Status string

// Store defines model for Store.
type Store struct {
	// BrandId Brand identifier
	BrandId *string `json:"BrandId,omitempty"`

	// FacilityShoppingCenterName Mall name
	FacilityShoppingCenterName *string `json:"FacilityShoppingCenterName,omitempty"`

	// FranchiseePartnerName Franchise name
	FranchiseePartnerName *string `json:"FranchiseePartnerName,omitempty"`

	// NameAlias Store name
	NameAlias *string `json:"NameAlias,omitempty"`

	// PrimaryAddress Store address
	PrimaryAddress *string `json:"PrimaryAddress,omitempty"`
	Status         *Status `json:"Status,omitempty"`

	// StoreFactsNumber Store number
	StoreFactsNumber *string `json:"StoreFactsNumber,omitempty"`

	// StoreFormatId Store format
	StoreFormatId *string `json:"StoreFormatId,omitempty"`
}

// StoreResponse defines model for StoreResponse.
type StoreResponse struct {
	Value *[]Store `json:"value,omitempty"`
}

// GetStoresParams defines parameters for GetStores.
type GetStoresParams struct {
	Filter *GetStoresParamsFilter `form:"filter,omitempty" json:"filter,omitempty"`
	Skip   *int                   `form:"skip,omitempty" json:"skip,omitempty"`
	Top    *int                   `form:"top,omitempty" json:"top,omitempty"`
}

// GetStoresParamsFilter defines parameters for GetStores.
type GetStoresParamsFilter string

// GetStoresCountParams defines parameters for GetStoresCount.
type GetStoresCountParams struct {
	Filter *GetStoresCountParamsFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetStoresCountParamsFilter defines parameters for GetStoresCount.
type GetStoresCountParamsFilter string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetStores request
	GetStores(ctx context.Context, params *GetStoresParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStoresCount request
	GetStoresCount(ctx context.Context, params *GetStoresCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetStores(ctx context.Context, params *GetStoresParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoresRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStoresCount(ctx context.Context, params *GetStoresCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStoresCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetStoresRequest generates requests for GetStores
func NewGetStoresRequest(server string, params *GetStoresParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/RetailStoresESB")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStoresCountRequest generates requests for GetStoresCount
func NewGetStoresCountRequest(server string, params *GetStoresCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/RetailStoresESB/$count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetStoresWithResponse request
	GetStoresWithResponse(ctx context.Context, params *GetStoresParams, reqEditors ...RequestEditorFn) (*GetStoresResponse, error)

	// GetStoresCountWithResponse request
	GetStoresCountWithResponse(ctx context.Context, params *GetStoresCountParams, reqEditors ...RequestEditorFn) (*GetStoresCountResponse, error)
}

type GetStoresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StoreResponse
}

// Status returns HTTPResponse.Status
func (r GetStoresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStoresCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStoresCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStoresCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetStoresWithResponse request returning *GetStoresResponse
func (c *ClientWithResponses) GetStoresWithResponse(ctx context.Context, params *GetStoresParams, reqEditors ...RequestEditorFn) (*GetStoresResponse, error) {
	rsp, err := c.GetStores(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoresResponse(rsp)
}

// GetStoresCountWithResponse request returning *GetStoresCountResponse
func (c *ClientWithResponses) GetStoresCountWithResponse(ctx context.Context, params *GetStoresCountParams, reqEditors ...RequestEditorFn) (*GetStoresCountResponse, error) {
	rsp, err := c.GetStoresCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStoresCountResponse(rsp)
}

// ParseGetStoresResponse parses an HTTP response from a GetStoresWithResponse call
func ParseGetStoresResponse(rsp *http.Response) (*GetStoresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StoreResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStoresCountResponse parses an HTTP response from a GetStoresCountWithResponse call
func ParseGetStoresCountResponse(rsp *http.Response) (*GetStoresCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStoresCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
